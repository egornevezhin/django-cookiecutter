version: '3.7'

services:
  backend:
    container_name: {{cookiecutter.project_slug}}_backend
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: on-failure
    volumes:
      - ./{{cookiecutter.project_slug}}/:/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/
    working_dir: /{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/
    command: uvicorn {{cookiecutter.project_slug}}.asgi:application --reload --host 0.0.0.0 --port 8000
    ports:
      - 8000:8000

{% if cookiecutter.docker_postgres == 'y' %}

  db:
    container_name: {{cookiecutter.project_slug}}_base
    image: postgres
    restart: on-failure
    env_file:
      - .env
    expose:
      - 5432

{% endif %}


{% if cookiecutter.celery == 'y' %}

  redis:
    container_name: {{cookiecutter.project_slug}}_redis
    restart: always
    image: redis:latest
    expose:
      - 6379
    environment:
      - TZ:"Europe/Moscow"

  celery:
    container_name: {{cookiecutter.project_slug}}_celery
    build:
      context: .
      dockerfile: ./Dockerfile
    command: sh -c "celery -A {{cookiecutter.project_slug}} worker -c 4 --loglevel=info"
    env_file:
      - .env
    working_dir: /{{cookiecutter.project_slug}}/
    volumes:
      - ./{{cookiecutter.project_slug}}/:/{{cookiecutter.project_slug}}/
    depends_on:
      - redis

  celerybeat:
    container_name: {{cookiecutter.project_slug}}_celerybeat
    build:
      context: .
      dockerfile: ./Dockerfile
    command: sh -c "celery -A {{cookiecutter.project_slug}} beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile="
    env_file:
      - .env
    depends_on:
      - redis
      - celery
    working_dir: /{{cookiecutter.project_slug}}/
    volumes:
      - ./{{cookiecutter.project_slug}}/:/{{cookiecutter.project_slug}}/


  flower:
    container_name: {{cookiecutter.project_slug}}_flower
    image: mher/flower:0.9.5
    ports:
      - 5000:5555
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
       - ./{{cookiecutter.project_slug}}/:/{{cookiecutter.project_slug}}/
    working_dir: /{{cookiecutter.project_slug}}/
    command: sh -c "flower -A {{cookiecutter.project_slug}} --loglevel=info"

{% endif %}

{% if cookiecutter.grafana == 'y' %}
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - web
    restart: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - web
    user: "104"
    expose:
      - 3000
    labels:
      - traefik.enable=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.rule=Host(`grafana.havchik.itmostudents.ru`)
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certresolver=myresolver
    restart: on-failure

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    expose:
      - 9100
    networks:
      - web
    restart: always

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    networks:
      - web
    restart: always

{% endif %}